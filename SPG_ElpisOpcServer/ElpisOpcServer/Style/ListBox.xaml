<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <DataTemplate x:Key="MetroListBoxItemTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="40"/>
                <ColumnDefinition Width="200"/>
            </Grid.ColumnDefinitions>
            <Path Data="{Binding Image}" Stretch="Uniform" Width="28" Height="28" 
                    Fill="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem, Mode=FindAncestor}, Path=Foreground}" />
            <StackPanel Grid.Column="1" Margin="5">
                <TextBlock Text="{Binding Path=Title, FallbackValue=Title}" FontFamily="Segoe UI Light" FontSize="20" 
                            Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem, Mode=FindAncestor}, Path=Foreground}" />
            </StackPanel>
        </Grid>
    </DataTemplate>


    <Style x:Key="activeStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#f4a460" >
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="Aqua"></Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <!--<Setter Property="Background" Value=" #30B544"></Setter>-->
                <Setter Property="Background" Value="#f4a460"></Setter>

            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="#f4a460" />

            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="UACertificateTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="Calibri"/>
    </Style>

    <Style x:Key="UACertificateTextBlockfrdback" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="UACertificateGroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderBrush" Value="orange"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="BorderThickness" Value="0.6"/>
        <Setter Property="FontFamily" Value="Calibri"/>
    </Style>

    <Style x:Key="UACertificateListBox" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="WhiteSmoke"/>
        <Setter Property="BorderBrush" Value="#FF787885"/>
        <Setter Property="BorderThickness" Value="1.6"/>
        <Setter Property="Foreground" Value="#4c4c4c"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Calibri"/>
    </Style>

    <Style x:Key="UACertificateBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="#FF787885"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="WhiteSmoke"/>
        <Setter Property="CornerRadius" Value="5"/>
        </Style>

        <Style x:Key="UACertificateButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#f4a460" >
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="Aqua"></Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <!--<Setter Property="Background" Value=" #30B544"></Setter>-->
                <Setter Property="Background" Value="#f4a460"></Setter>

            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="#f4a460" />

            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TransparentStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#3D87CE"/>
        <Setter Property="Foreground" Value="GhostWhite" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border>
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="DarkGoldenrod"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Grid Background="Transparent">
                            <ContentPresenter></ContentPresenter>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="slidebtn" TargetType="{x:Type Button}">
        <Setter
            Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#f4a460">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="Aqua"></Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="SaddleBrown"></Setter>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="#f4a460" />
                        </Trigger>
 </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
    </Style>

    <Style x:Key="MetroListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#FFB9B9B9"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="Black" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="Black" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#FF0072C6"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{x:Null}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxUIStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton Grid.Column="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" >
                                <ToggleButton.Template>
                                    <ControlTemplate>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="5*" />
                                                <ColumnDefinition Width="0.8*" />
                                            </Grid.ColumnDefinitions>
                                            <Border x:Name="Border"  Grid.ColumnSpan="2" CornerRadius="3" Background="Transparent" BorderBrush="Black" BorderThickness="1" />
                                            <Border Grid.Column="0" CornerRadius="3,0,0,3"  Margin="1"  Background="Transparent"  BorderBrush="Black" BorderThickness="0,0,1,0" />
                                            <Path x:Name="Arrow" Grid.Column="1"  Fill="Brown" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="#f4a460" />
                                            </Trigger>
                                            <Trigger Property="ToggleButton.IsChecked" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="#f4a460" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                            <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3"  />
                            <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                            <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True"  Focusable="True" PopupAnimation="Slide">
                                <Grid  Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Background="White" BorderThickness="1" />
                                    <ScrollViewer SnapsToDevicePixels="True" BorderThickness="1">
                                        <StackPanel IsItemsHost="True" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
            </Style.Triggers>
        </Style>
    
    <Style x:Key="ToggleButtonUI" TargetType="{x:Type ToggleButton}">
         <!--<Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#f4a460" >
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"  Value="Gray"/>                            
                            <Setter Property="Foreground" Value="Yellow" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
        
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#f4a460">
                </Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="Red">
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ConfigurationBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="#FF787885"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="WhiteSmoke"/>
        <Setter Property="CornerRadius" Value="4"/>
    </Style>
    
    <Style x:Key="ToggleUI" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="1" 
                            CornerRadius="2"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"
                                          Height="17" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#f4a460" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Wheat" />
            </Trigger> 
        </Style.Triggers>
    </Style>


</ResourceDictionary>